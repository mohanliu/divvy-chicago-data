{'scoring': None, 'estimator': Pipeline(memory=None,
         steps=[('ohe',
                 OneHotEncoder(categorical_features=[63, 64], categories=None,
                               drop=None, dtype=<class 'numpy.float64'>,
                               handle_unknown='error', n_values=None,
                               sparse=False)),
                ('mms', MinMaxScaler(copy=False, feature_range=(0, 1))),
                ('rf',
                 RandomForestRegressor(bootstrap=True, criterion='mse',
                                       max_depth=None, max_features='auto',
                                       max_leaf_nodes=None,
                                       min_impurity_decrease=0.0,
                                       min_impurity_split=None,
                                       min_samples_leaf=1, min_samples_split=2,
                                       min_weight_fraction_leaf=0.0,
                                       n_estimators=10, n_jobs=None,
                                       oob_score=False, random_state=None,
                                       verbose=0, warm_start=False))],
         verbose=False), 'n_jobs': 2, 'iid': 'warn', 'refit': True, 'cv': 2, 'verbose': 0, 'pre_dispatch': '2*n_jobs', 'error_score': 'raise-deprecating', 'return_train_score': False, 'param_grid': {'rf__n_estimators': [10]}, 'multimetric_': False, 'best_index_': 0, 'best_score_': 0.6276813479129681, 'best_params_': {'rf__n_estimators': 10}, 'best_estimator_': Pipeline(memory=None,
         steps=[('ohe',
                 OneHotEncoder(categorical_features=[63, 64], categories=None,
                               drop=None, dtype=<class 'numpy.float64'>,
                               handle_unknown='error', n_values=None,
                               sparse=False)),
                ('mms', MinMaxScaler(copy=False, feature_range=(0, 1))),
                ('rf',
                 RandomForestRegressor(bootstrap=True, criterion='mse',
                                       max_depth=None, max_features='auto',
                                       max_leaf_nodes=None,
                                       min_impurity_decrease=0.0,
                                       min_impurity_split=None,
                                       min_samples_leaf=1, min_samples_split=2,
                                       min_weight_fraction_leaf=0.0,
                                       n_estimators=10, n_jobs=None,
                                       oob_score=False, random_state=None,
                                       verbose=0, warm_start=False))],
         verbose=False), 'refit_time_': 133.0750584602356, 'scorer_': <function _passthrough_scorer at 0x1a19ac3f28>, 'cv_results_': {'mean_fit_time': array([58.55235934]), 'std_fit_time': array([0.89678717]), 'mean_score_time': array([2.67311776]), 'std_score_time': array([0.0857743]), 'param_rf__n_estimators': masked_array(data=[10],
             mask=[False],
       fill_value='?',
            dtype=object), 'params': [{'rf__n_estimators': 10}], 'split0_test_score': array([0.62843315]), 'split1_test_score': array([0.62692955]), 'mean_test_score': array([0.62768135]), 'std_test_score': array([0.0007518]), 'rank_test_score': array([1], dtype=int32)}, 'n_splits_': 2}
{'scoring': None, 'estimator': Pipeline(memory=None,
         steps=[('ohe',
                 OneHotEncoder(categorical_features=[63, 64], categories=None,
                               drop=None, dtype=<class 'numpy.float64'>,
                               handle_unknown='error', n_values=None,
                               sparse=False)),
                ('mms', MinMaxScaler(copy=False, feature_range=(0, 1))),
                ('rf',
                 RandomForestRegressor(bootstrap=True, criterion='mse',
                                       max_depth=None, max_features='auto',
                                       max_leaf_nodes=None,
                                       min_impurity_decrease=0.0,
                                       min_impurity_split=None,
                                       min_samples_leaf=1, min_samples_split=2,
                                       min_weight_fraction_leaf=0.0,
                                       n_estimators=10, n_jobs=None,
                                       oob_score=False, random_state=None,
                                       verbose=0, warm_start=False))],
         verbose=False), 'n_jobs': 2, 'iid': 'warn', 'refit': True, 'cv': 2, 'verbose': 0, 'pre_dispatch': '2*n_jobs', 'error_score': 'raise-deprecating', 'return_train_score': False, 'param_grid': {'rf__n_estimators': [10]}, 'multimetric_': False, 'best_index_': 0, 'best_score_': 0.6276813479129681, 'best_params_': {'rf__n_estimators': 10}, 'best_estimator_': Pipeline(memory=None,
         steps=[('ohe',
                 OneHotEncoder(categorical_features=[63, 64], categories=None,
                               drop=None, dtype=<class 'numpy.float64'>,
                               handle_unknown='error', n_values=None,
                               sparse=False)),
                ('mms', MinMaxScaler(copy=False, feature_range=(0, 1))),
                ('rf',
                 RandomForestRegressor(bootstrap=True, criterion='mse',
                                       max_depth=None, max_features='auto',
                                       max_leaf_nodes=None,
                                       min_impurity_decrease=0.0,
                                       min_impurity_split=None,
                                       min_samples_leaf=1, min_samples_split=2,
                                       min_weight_fraction_leaf=0.0,
                                       n_estimators=10, n_jobs=None,
                                       oob_score=False, random_state=None,
                                       verbose=0, warm_start=False))],
         verbose=False), 'refit_time_': 133.0750584602356, 'scorer_': <function _passthrough_scorer at 0x1a19ac3f28>, 'cv_results_': {'mean_fit_time': array([58.55235934]), 'std_fit_time': array([0.89678717]), 'mean_score_time': array([2.67311776]), 'std_score_time': array([0.0857743]), 'param_rf__n_estimators': masked_array(data=[10],
             mask=[False],
       fill_value='?',
            dtype=object), 'params': [{'rf__n_estimators': 10}], 'split0_test_score': array([0.62843315]), 'split1_test_score': array([0.62692955]), 'mean_test_score': array([0.62768135]), 'std_test_score': array([0.0007518]), 'rank_test_score': array([1], dtype=int32)}, 'n_splits_': 2}
